

# * Crea una funci√≥n llamada division_segura(a, b) que:
def division_segura(a, b):
    try:
        return a / b #!‚ö†Ô∏èAaca es donde puede lanzarce la excepcion
    except ZeroDivisionError as e:
        return f"‚ùå El divisor no puede ser 0. Error de tipo: {type(e)}"
    except Exception as e:
        return f"‚ùå Ha ocurrido un error inesperado: {e}. De tipo: {type(e)}"
    finally:
        print("üîö Fin del bloque try/except 1Ô∏è‚É£")

try:
    dividendo = float(input("Ingrese el dividendo: "))             #!‚ö†Ô∏èAaca es donde puede lanzarce la excepcion
    divisor = float(input("Ingrese el divisor, diferente a 0: "))  #!‚ö†Ô∏èAaca es donde puede lanzarce la excepcion
    # int('12.3')#!‚ö†Ô∏è
except ValueError as e:
    print(f"‚ùå El n√∫mero digitado no es num√©rico. Error de tipo: {type(e)}")
else:
    resultado = division_segura(dividendo, divisor)
    print("‚úÖ El resultado es:", resultado)
finally:
        print("üîö Fin del bloque try/except 2Ô∏è‚É£")




















# def division_segura(a, b):
#     try:
#         return a/b #!‚ö†Ô∏è aca es que puede ocurrir el error
#     except ZeroDivisionError as e:
#         return f'‚ùå No puedes dividir por 0. Tipo de Error: {type(e)}'
#     except BaseException as e:
#         return f'‚ùå Programa finalizo inesperadamente. Tipo de Error: {type(e)}'
#     except Exception as e:
#         return f'‚ùå Ha ocurrido un error de tipo: {type(e)}'
#     finally:
#         print('üîö PRIMER bloque try/exception finalizado') 

# # print(division_segura(8, 1))
# try:
#     primero = float(input('Introduduca divi: ')) 
#     segundo = float(input('Introduduca divisor: '))
# except ValueError as e:
#     print(f'‚ùå El num difitado no es numerico. Error de tipo {type(e)}')
# except Exception as e:
#     print(f'‚ùå Ha ocurrido un error de tipo: {type(e)}')
# else:
#     resultado = division_segura(primero, segundo)
#     print(f'‚úÖ El resultado es: {resultado}')
# finally:
#         print('üîö SEGUNDO bloque try/exception finalizado')